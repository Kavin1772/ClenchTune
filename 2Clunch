import serial
import time
import pygame
import sys
import os

# === CONFIGURATION ===
MUSIC_FOLDER = r'E:\SFSU\Sem-2\NMI\Term Project\Songs'
ARDUINO_PORT = 'COM3'
BAUD_RATE = 9600
SERIAL_TIMEOUT = 2

PAUSE_RANGE = (300, 500)  # A0
SKIP_RANGE = (260, 480)   # A1
ACTION_COOLDOWN = 1.5     # seconds

# === INIT FUNCTIONS ===
def load_playlist(folder_path):
    return [os.path.join(folder_path, f) for f in os.listdir(folder_path)
            if f.lower().endswith(('.mp3', '.wav'))]

def init_music_player():
    pygame.mixer.init()

def play_track(file_path):
    pygame.mixer.music.load(file_path)
    pygame.mixer.music.play()
    print(f"üéµ Now playing: {os.path.basename(file_path)}")

def init_serial(port):
    try:
        ser = serial.Serial(port, BAUD_RATE, timeout=SERIAL_TIMEOUT)
        print(f"‚úÖ Connected to {port}")
        return ser
    except serial.SerialException as e:
        sys.exit(f"‚ùå Failed to connect to {port}: {e}")

def read_dual_emg(ser):
    try:
        line = ser.readline().decode('utf-8').strip()
        if ',' in line:
            a0, a1 = line.split(',')
            return int(a0), int(a1)
    except:
        pass
    return None, None

# === MAIN LOOP ===
def main():
    playlist = load_playlist(MUSIC_FOLDER)
    if not playlist:
        sys.exit("‚ùå No music files found.")

    init_music_player()
    current_track = 0
    play_track(playlist[current_track])
    is_playing = True

    ser = init_serial(ARDUINO_PORT)
    last_pause_time = 0
    last_skip_time = 0

    try:
        while True:
            current_time = time.time()
            pause_val, skip_val = read_dual_emg(ser)

            # === Show side-by-side sensor values ===
            if pause_val is not None and skip_val is not None:
                print(f"A0 (Pause): {pause_val} | A1 (Skip): {skip_val}")

            # === Pause/Play from A0 ===
            if pause_val is not None and 0 < pause_val < 700:
                if PAUSE_RANGE[0] <= pause_val <= PAUSE_RANGE[1]:
                    if current_time - last_pause_time >= ACTION_COOLDOWN:
                        if is_playing:
                            pygame.mixer.music.pause()
                            print("‚è∏Ô∏è Paused (A0)")
                        else:
                            pygame.mixer.music.unpause()
                            print("‚ñ∂Ô∏è Resumed (A0)")
                        is_playing = not is_playing
                        last_pause_time = current_time

            # === Skip from A1 ===
            if skip_val is not None and 0 < skip_val < 700:
                if SKIP_RANGE[0] <= skip_val <= SKIP_RANGE[1]:
                    if current_time - last_skip_time >= ACTION_COOLDOWN:
                        current_track = (current_track + 1) % len(playlist)
                        play_track(playlist[current_track])
                        is_playing = True
                        print("‚è≠Ô∏è Skipped (A1)")
                        last_skip_time = current_time

            # Auto next song
            if not pygame.mixer.music.get_busy() and is_playing:
                current_track = (current_track + 1) % len(playlist)
                play_track(playlist[current_track])

            time.sleep(0.05)

    except KeyboardInterrupt:
        print("üëã Exiting.")
    finally:
        pygame.mixer.music.stop()
        ser.close()
        print("üõë Music stopped. Serial port closed.")

if __name__ == '__main__':
    main()
